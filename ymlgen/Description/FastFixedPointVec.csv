"empty_fv","An empty fixed-point vector."
"slice_fv","A slice of another fixed-point vector, including elements with indices from `i1` (inclusive) to `i2` (exclusive)."
"fv_unchecked","Creating a fixed-point vector without checking for fitting in `len` bits."
"fv_checked","Creating a fixed-point vector, checking for fitting in `len` bits."
"uv_to_fv_unchecked","Converting an integer vector into a fixed-point vector, unchecked."
"add_fv","Adding two fixed-point vectors elementwise, checked, very slow."
"add_fv_exact","Adding two fixed-point vectors elementwise, increases the `len` by `1` to guarantee fitting, very fast."
"add_fv_unchecked","Adding two fixed-point vectors elementwise, unchecked, very fast."
"add_fixed_fv_unchecked","Adding a scalar to all elements of a fixed-point vector."
"add_prefixed_fv_unchecked","Adding a constant to all elements of a fixed-point vector."
"negate_fv","Negating (multiplying by `-1`) the elements of a fixed-point vector."
"sub_fv","Subtracting two fixed-point vectors elementwise, checked, very slow."
"sub_fv_unchecked","Subtracting two fixed-point vectors elementwise, unchecked, very fast."
"mul_fv","Multiplying two fixed-point vectors elementwise, rounding, slow."
"mul_fv_exact","Multiplying two fixed-point vectors elementwise, no rounding, fast, the `len` and `pplen` of the result are the sum of the `len` and `pplen` of the arguments, respectively."
"mul_fixed_fv_exact","Multiplying all elements of a fixed-point vector by a scalar, no rounding, fast, the `len` and `pplen` of the result are the sum of the `len` and `pplen` of the arguments, respectively."
"mul_prefixed_fv_exact","Multiplying all elements of a fixed-point vector by a constant, no rounding, fast, the `len` and `pplen` of the result are the sum of the `len` and `pplen` of the arguments, respectively."
"mul_fixed_uv_unchecked","Multiplying all elements of an integer vector by a fixed-point scalar, unchecked, fast."
"mul_uint_fv_unchecked","Multiplying all elements of a fixed-point vector by an integer scalar, unchecked, fast."
"mul_uv_fv_unchecked","Multiplying an integer vector and a fixed-point vector elementwise, unchecked, fast."
"div_fv","Dividing two fixed-point vectors elementwise."
"div_fixed_fv","Dividing a scalar by each element of a fixed-point vector."
"sqrt_fv","Taking a square root of all elements of a fixed-point vector."
"max_fv","Elementwise maximum of two fixed-point vectors."
"max_fixed_fv","The *i*th element of the output is the maximum of the scalar and the *i*th element of the input fixed-point vector."
"min_fv","Elementwise minimum of two fixed-point vectors."
"min_fixed_fv","The *i*th element of the output is the minimum of the scalar and the *i*th element of the input fixed-point vector."
"sum_fv_unchecked","The sum of the elements of a fixed-point vector, unchecked."
"scalar_prod_uv_fv_unchecked","The scalar product (dot product) of an integer vector and a fixed-point vector, unchecked."
"ge_fv_fixed","Comparing each element of the input fixed-point vector `xv` with a scalar `y`. Returns a fixed-point vector with the same number of elements as `xv`, with the `i`th element being `1` if `xv[i] >= y` and `0` otherwise."
"le_fv_fixed","Comparing each element of the input fixed-point vector `xv` with a scalar `y`. Returns a fixed-point vector with the same number of elements as `xv`, with the `i`th element being `1` if `xv[i] <= y` and `0` otherwise."
"checked_fv","Returning the same fixed-point vector after checking that each element fits in `len` bits. Can be applied to the result of functions with the suffix `_unchecked` to make them safe. Sometimes it is possible to make several `_unchecked` operations in a row before calling the expensive `checked_fv`, as long as the intermediate results do not overflow the modulus (but they do not have to fit into `len` bits). For example, three fixed-point vectors can be added together by `checked_fv(add_fv_unchecked(xs, add_fv_unchecked(ys, zs)))`, calling `checked_fv` only once rather than twice. This is safe if `3*(2^len - 1) < N`."
"check_fv","Checking that each element of a fixed-point vector fits in `len` bits. The same as `checked_fv` but without returning the input vector."
"make_unknown_fv","Removing values from the wire range corresponding to the fixed-point vector, to make circuit generation faster if the values are no longer needed in `$pre`."
"thaw_fv","Converting a fixed-point vector to a list of fixed-point scalars."
"increase_pplen_fv","Increasing `pplen` of each element of a fixed-point vector to a given value and increasing the `len` to keep `len - pplen` the same as before."
"decrease_len_fv_unchecked","Decreasing the `len` of each element of a fixed-point vector without checking for fitting into the new `len` bits."
"round_down_fv","Decreasing the `pplen` of each element of a fixed-point vector by rounding down (towards minus infinity) some of the final bits."
"round_down_fv_to_half","Rounding down half of the bits after the point of each element of a fixed-point vector, can be used after `mul_fv_exact` to get back to the original `len` and `pplen`."
"round_down_fv_to_int","Rounding each element of a fixed-point vector down to an integer (taking the floor of each element)."
"round_down_fv_unchecked","Unchecked version of round_down_fv, about twice as fast."
