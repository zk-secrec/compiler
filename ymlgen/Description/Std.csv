"error","Halting immediately with an assertion failure."
"undefined","An assertion failure along with an infinite loop."
"id","The polymorphic identity function."
"univ_assert","Assertion that does not depend on stage."
"univ_assert_zero","Assertion of equality to zero that does not depend on stage."
"impli","Logical implication."
"equiv","Logical equivalence."
"uint_cond","Choice between two integers. Oblivious in `$post @prover`, evaluating both branches."
"bool_cond","Choice between two booleans. Oblivious in `$post @prover`, evaluating both branches."
"conditional_assert_zero","Assertion of equality to zero, provided that the given condition is true."
"conditional_assert","Assertion, provided that the given condition is true."
"univ_conditional_assert_zero","Assertion of equality to zero, provided that the given condition is true. Does not depend on stage."
"univ_conditional_assert","Assertion, provided that the given condition is true. Does not depend on stage."
"++","Synonym for string append."
"foldl_pre","The polymorphic left fold of list with elements in `$pre`."
"foldr_pre","The polymorphic right fold of list with elements in `$pre`."
"zip_with","The polymorphic zip of corresponding elements of two lists with the given operation. The lists must be of the same length."
"zip_with_upto","The polymorphic zip of corresponding elements of two lists with the given operation, up to the given position."
"map","The polymorphic map of elements of the given list with the given function."
"foldl","The polymorphic left fold of the given list with the given operation and the given initial value."
"foldr","The polymorphic right fold of the given list with the given operation and the given initial value."
"reverse_pre","The given list with elements in `$pre` reversed."
"count_pre","The number of elements satisfying the given predicate in the given list with elements in `$pre`."
"all_pre","True iff all elements of the given list with boolean elements in `$pre` are true."
"any_pre","True iff at least one element of the given list with boolean elements in `$pre` is true."
"sum_pre","Sum of all elements of the given list or vector with elements in `$pre`."
"prod_pre","Product of all elements of the given list or vector with elements in `$pre`."
"reverse","The given list reversed."
"count","The number of elements satisfying the given predicate in the given list."
"all","True iff all elements of the given list with boolean elements are true."
"any","True iff at least one element of the given list with boolean elements is true."
"sum","Sum of all elements of the given list or vector."
"prod","Product of all elements of the given list or vector."
"scalar_prod","Scalar (dot) product of the initial parts of the given two lists up to the given position."
"sq_sum","Sum of squares of all elements of the given list."
"group","Splitting of elements of the given list into groups of the given length."
"append","Concatenating of two lists."
"concat","Concatenating of all element lists of the given list of lists. Assumes that all element lists have the same length."
"concat_non_rectangle","Concatenating of all element lists of the given list of lists."
"duplicate_indices","Replacing of each element of the given list of numbers with the corresponding index replicated that many times."
"merge","Merging two lists that are assumed to be sorted into a new sorted list."
"sort","Merge sort of the given list."
"list_push","Appending the given element to the end of the given list."
"list_to_public_length","Truncating the given list at the given public length."
"pre_uint_list_to_post_array","Truncating the given list with elements in `$pre` at the given public length and converting the result to a vector on wires."
"bool_list_to_post","Putting the elements of the given list with boolean elements in `$pre` on wires."
"uint_list_to_post","Putting the elements of the given list with integral elements in `$pre` on wires."
"bool_list_to_pre","Converting the elements of the given list of booleans to the stage `$pre`."
"uint_list_to_pre","Converting the elements of the given list of integers to the stage `$pre`."
"bool_list_to_prover","Converting the elements of the given list of booleans to the domain `@prover`."
"uint_list_to_prover","Converting the elements of the given list of integers to the domain `@prover`."
"bool_list_to_uint","Converting the elements of the given list of booleans to integers."
"uint_ensure_post","Ensuring that the elements of the given list of integers are in `$post`. If they are then does nothing, otherwise applies `wire`."
"bool_ensure_post","Ensuring that the elements of the given list of booleans are in `$post`. If they are then does nothing, otherwise applies `wire`."
"uint_downcast","Downcasting the elements of the given list of integers in the stage `$pre` into the given stage. If the given stage is `$pre` then does nothing, otherwise applies `wire`."
"bool_downcast","Downcasting the elements of the given list of booleans in the stage `$pre` into the given stage. If the given stage is `$pre` then does nothing, otherwise applies `wire`."
"nonzero_challenge","Generating a list of the given length and consisting of random non-zero field elements."
