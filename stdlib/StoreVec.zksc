/*
 * Copyright 2024 Cybernetica AS
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

use Std::*;
use Integer::*;
use Bitextract::*;
use OldInequalities::*;
use Waksman::*;

// Assumes that length(keys) > 0
fn finalize_store_helper[N : Nat,@D](opers : list[bool $pre @public], keys : list[uint[N] $post @D], values : list[uint[N] $post @D], writeOnce : bool $pre @public, contiguous : bool $pre @public, def : bool $pre @public)
  where Field[N], Vectorization {

  // Assuming that all arguments have the same length
  let ops =
    if (writeOnce) { [] }
    else {
      for i in 0 .. length(opers) {
        (wire { opers[i] as bool[N] as uint[N] }) as @D
      }
    };

  // Sort lists by (k, i)
  let reorderSwitches : list[bool[N] $post @D] = get_switches_for_sorting(for i in 0..length(keys) { keys[i] as $pre });
  let permNw = make_waksman_network(length(keys));

  let reorderSwitches = if (contiguous & writeOnce) { make_unknown(reorderSwitches) } else { reorderSwitches };
  let keys = if (contiguous & writeOnce) { make_unknown(keys) } else { keys };
  let values = if (contiguous & writeOnce) { make_unknown(values) } else { values };

  // if we want to state that updates must happen first, then we have to bring back this permutation
  let sortedOps = if (writeOnce) { [] } else { apply_switching_network_uint(ops, permNw, reorderSwitches) }; // if we want to state that updates must happen first, then we have to bring back this permutation
  let sortedKeys = apply_switching_network_uint(keys, permNw, reorderSwitches);
  let sortedValues = apply_switching_network_uint(values, permNw, reorderSwitches);
  let sortedIdxs = if (writeOnce) { [] } else { apply_switching_network_uint(for i in 0..length(keys) { (wire { i as uint[N] }) as @D }, permNw, reorderSwitches) };

  // TODO: Can we pick a better fbw?
  let key_fbw = (log2(N) - 2) as u64;
  let idx_fbw = field_bit_width(length(sortedIdxs) as uint) as u64;

  let sortedKeysBits = if (contiguous) { [] } else { for i in 0..length(sortedKeys) { bitextract(sortedKeys[i], key_fbw) } };
  let sortedIdxsBits = if (writeOnce) { [] } else { for i in 0..length(sortedIdxs) { bitextract(sortedIdxs[i], idx_fbw) } };

  if(!writeOnce) {
    if (def) {
      // op_1 = U \/ val_1 = 0
      assert_zero(sortedOps[0] * sortedValues[0]);
    } else {
      // op_1 = U
      assert_zero(sortedOps[0]);
    }
  }
  for j in 0..length(opers)-1 {
    let keysEq = if(contiguous) {sortedKeys[j] + 1 - sortedKeys[j+1]} else { is_zero(sortedKeys[j] - sortedKeys[j+1]) as uint[N] };
    if (writeOnce) {
        // k_j = k_{j+1} ==> v_j = v_{j+1}
        assert_zero(keysEq * (sortedValues[j] - sortedValues[j+1]));
        // no checks about the updates. But could probably add it like this:
        // k_j /= k_{j+1} <=> op_{j+1} = U (that will be two assertions)
    } else {
        // k_j = k_{j+1} /\ op_{j+1} = L => v_j = v_{j+1}
        assert_zero(sortedOps[j+1] * keysEq * (sortedValues[j] - sortedValues[j+1]));
        if (def) {
          // k_j /= k_{j+1} => op_{j+1} = U \/ val_{j+1} = 0
          assert_zero((1 - keysEq) * sortedOps[j+1] * sortedValues[j+1]);
        } else {
          // k_j /= k_{j+1} => op_{j+1} = U
          assert_zero((1 - keysEq) * sortedOps[j+1]);
        }
    }

    // Sorting checks
    if(contiguous) {
        assert_zero(keysEq * (keysEq - 1));
    } else {
        assert(le'(sortedKeysBits[j], sortedKeysBits[j+1], key_fbw));
    }
    // Sorting stability check
    if (!writeOnce) {
        let leq = le'(sortedIdxsBits[j+1], sortedIdxsBits[j], idx_fbw);
        assert_zero(keysEq * leq as uint[N]);
    };
  };
}

// Assumes that N is prime
fn finalize_store[@D, N : Nat](opers : list[bool $pre @public], keys : list[uint[N] $post @D], values : list[uint[N] $post @D],
                                   writeOnce : bool $pre @public, contiguous : bool $pre @public, def : bool $pre @public)
  where Field[N], Vectorization {

  let w = count(opers, fn (x) { !x } ) as u64;
  let r = length(opers) - w;
  if (writeOnce as b64 & w > 0) {
    let mut wcnt = 0;
    let mut rcnt = 0;
    let opers1 = for i in 0 .. w + r { (i >= w) as bool };
    let mut keys1 = for i in 0 .. w + r { 0 };
    let mut values1 = for i in 0 .. w + r { 0 };
    for i in 0 .. w + r {
      if (opers[i]) {
        keys1[w + rcnt] = keys[i];
        values1[w + rcnt] = values[i];
        rcnt = rcnt + 1;
      } else {
        keys1[wcnt] = keys[i];
        values1[wcnt] = values[i];
        wcnt = wcnt + 1;
      }
    }
    let k = r / w;
    let enum = 19;
    let eden = 7;
    let mut enumpow = 1;
    let mut edenpow = 1;
    let mut x = 0;
    for i in 1 .. k {
      enumpow = enum * enumpow;
      edenpow = eden * edenpow;
      if (enumpow < 2 * (1 + i) * w * edenpow) { x = x + 1; }
      else { break; }
    };
    let xN = x as uint[N];
    let kN = k as uint[N];
    let wN = w as uint[N];
    if (xN > 1 & pow_pre(2 * (1 + xN), 1 + x) * wN < pow_pre(kN + 1, x)) {
      let l = k / x;
      for i in 0 .. l {
        let m = if (i < l - 1) { w + x * w } else { w + r - (l - 1) * x * w };
        let opers_small = for j in 0 .. m { (j >= w) as bool };
        let keys_small = for j in 0 .. m { if (j < w) { keys1[j] } else { keys1[i * x * w + j] }};
        let values_small = for j in 0 .. m { if (j < w) { values1[j] } else { values1[i * x * w + j] }};
        finalize_store_helper(opers_small, keys_small, values_small, writeOnce, contiguous, def);
      };
    } else { finalize_store_helper(opers1, keys1, values1, writeOnce, contiguous, def); }
  } else { finalize_store_helper(opers, keys, values, writeOnce, contiguous, def); };
}

// Set whether to use --stores-default for a given $pre store (def = true) or not (def = false).
unchecked eff * -> * -> * ! @public
pub extern fn set_store_default[N : Nat, @D](ref st : store[uint[N], uint[N]] $pre @D, def : bool $pre @D);

pub struct Store[N : Nat, $S, @D] {
    opers : list[bool $pre @public],
    keys : list[uint[N] $S @D],
    values : list[uint[N] $S @D],
    stor : store[uint[N], uint[N]] $pre @D,
    writeOnce : bool $pre @public,
    contiguous : bool $pre @public,
    def : bool $pre @public,
}

impl Store {
    fn finalize[N : Nat, $S, @D](st : Store[N, $S, @D])
      where Field[N], Vectorization {
        if (post $S) {
            dbg_print(string_append("Finalizing $post store with ", string_append(to_string(length(st.opers)), " operations")));
            if (length(st.keys) > 0) {
                // Choose one of the following two lines (the second one is faster but works only with challenges):
                finalize_store(st.opers, st.keys, st.values, st.writeOnce, st.contiguous, st.def);
                // finalize_store_challenge(st.opers, st.keys, st.values, st.writeOnce, st.contiguous, st.def); 
            }
            dbg_print("Finished finalization of $post store" : string $pre @public);
        } else {
            dbg_print("Skipping finalization of $pre store" : string $pre @D);
        }
    }
}

pub fn store_new[N : Nat, $S, @D](writeOnce : bool $pre @public, contiguous : bool $pre @public, def : bool $pre @public) -> Store[N, $S, @D]
  where Field[N] { // we add the Field constraint here because it is currently not checked when finalize is called automatically
    let mut stor = {## };
    set_store_default(ref stor, def as @D);
    Store {
        opers : [],
        keys : [],
        values : [],
        stor : stor,
        writeOnce : writeOnce,
        contiguous : contiguous,
        def : def,
    }
}

pub fn store_new_nodef[N : Nat, $S, @D]() -> Store[N, $S, @D]
  where Field[N] {
    store_new(false, false, false)
}

pub fn store_new_def[N : Nat, $S, @D]() -> Store[N, $S, @D]
  where Field[N] {
    store_new(false, false, true)
}

pub fn store_read[N : Nat, $S, @D](ref st : Store[N, $S, @D], key : uint[N] $S @D) -> uint[N] $S @D where Field[N] {
    if (post $S) {
        let k = key as $pre;
        let v = st.stor{## k};
        let val = wire{v};
        list_push(ref st.opers, true); // true = read
        list_push(ref st.keys, key);
        list_push(ref st.values, val);
        val
    } else {
        st.stor{## key}
    }
}

pub fn store_read_vec[N : Nat, @D](ref st : Store[N, $post, @D], keys : arr[uint[N] $post @D]) -> arr[uint[N] $post @D] where Vectorization {
    let vals_pre =
        for i in 0 .. length(keys) {
            let k = keys[i] as $pre;
            st.stor{## k}
        };
    let vals = array_to_post(freeze(vals_pre));
    for i in 0 .. length(keys) {
        list_push(ref st.opers, true); // true = read
        list_push(ref st.keys, keys[i]);
        list_push(ref st.values, vals[i]);
    }
    vals
}

pub fn store_write[N : Nat, $S, @D](ref st : Store[N, $S, @D], key : uint[N] $S @D, val : uint[N] $S @D) {
    if (post $S) {
        list_push(ref st.opers, false); // false = write
        list_push(ref st.keys, key);
        list_push(ref st.values, val);
        let k = key as $pre;
        let v = val as $pre;
        st.stor{## k} = v;
    } else {
        st.stor{## key} = val;
    }
}

